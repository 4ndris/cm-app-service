/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package hu.vereba.cm.rest.api;

import hu.vereba.cm.rest.model.ErrorMessage;
import hu.vereba.cm.rest.model.Show;
import hu.vereba.cm.rest.model.Shows;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "Show", description = "the Show API")
public interface ShowApi {

    /**
     * POST /services/shows : Create a new show (movie or series)
     *
     * @param show Show resource to be created (required)
     * @return Show created (status code 201)
     *         or Invalid request sent (status code 400)
     *         or Id already exist among items (status code 409)
     *         or Internal error  (status code 500)
     */
    @Operation(
        operationId = "addShow",
        summary = "Create a new show (movie or series)",
        tags = { "Show" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Show created"),
            @ApiResponse(responseCode = "400", description = "Invalid request sent"),
            @ApiResponse(responseCode = "409", description = "Id already exist among items"),
            @ApiResponse(responseCode = "500", description = "Internal error ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/services/shows",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> addShow(
        @Parameter(name = "Show", description = "Show resource to be created", required = true) @Valid @RequestBody Show show
    );


    /**
     * DELETE /services/shows/{id} : Delete show with a specific ID
     *
     * @param id Id of the show (required)
     * @return OK (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Show not found  Details --- - SHOW_NOT_FOUND   &gt; Show not found  (status code 404)
     *         or Validation exception (status code 405)
     *         or Internal error  (status code 500)
     */
    @Operation(
        operationId = "deleteShow",
        summary = "Delete show with a specific ID",
        tags = { "Show" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Show not found  Details --- - SHOW_NOT_FOUND   > Show not found ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))
            }),
            @ApiResponse(responseCode = "405", description = "Validation exception"),
            @ApiResponse(responseCode = "500", description = "Internal error ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/services/shows/{id}",
        produces = { "application/json" }
    )
    ResponseEntity<Void> deleteShow(
        @Parameter(name = "id", description = "Id of the show", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * GET /services/shows/{id} : Get show with a specific ID
     *
     * @param id Id of the show (required)
     * @return OK (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Show not found  Details --- - SHOW_NOT_FOUND   &gt; Show not found  (status code 404)
     *         or Validation exception (status code 405)
     *         or Internal error  (status code 500)
     */
    @Operation(
        operationId = "getShow",
        summary = "Get show with a specific ID",
        tags = { "Show" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Show.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Show not found  Details --- - SHOW_NOT_FOUND   > Show not found ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))
            }),
            @ApiResponse(responseCode = "405", description = "Validation exception"),
            @ApiResponse(responseCode = "500", description = "Internal error ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/services/shows/{id}",
        produces = { "application/json" }
    )
    ResponseEntity<Show> getShow(
        @Parameter(name = "id", description = "Id of the show", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * GET /services/shows : Get the list of shows (movies and series)
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "listShows",
        summary = "Get the list of shows (movies and series)",
        tags = { "Show" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Shows.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/services/shows",
        produces = { "application/json" }
    )
    ResponseEntity<Shows> listShows(
        
    );


    /**
     * PUT /services/shows/{id} : Update show for a given ID
     *
     * @param id Id of the show (required)
     * @param show  (required)
     * @return OK (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Show not found  Details --- - SHOW_NOT_FOUND   &gt; Show not found  (status code 404)
     *         or Validation exception (status code 405)
     *         or Internal error  (status code 500)
     */
    @Operation(
        operationId = "updateShow",
        summary = "Update show for a given ID",
        tags = { "Show" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Show.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = Show.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Show not found  Details --- - SHOW_NOT_FOUND   > Show not found ", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorMessage.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))
            }),
            @ApiResponse(responseCode = "405", description = "Validation exception"),
            @ApiResponse(responseCode = "500", description = "Internal error ", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorMessage.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/services/shows/{id}",
        produces = { "*/*", "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Show> updateShow(
        @Parameter(name = "id", description = "Id of the show", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "Show", description = "", required = true) @Valid @RequestBody Show show
    );


    /**
     * GET / : Welcome page
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "welcome",
        summary = "Welcome page",
        tags = { "Show" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/",
        produces = { "text/plain" }
    )
    ResponseEntity<String> welcome(
        
    );

}
